-------------------------------------------------------------------------------
-- Title      : TIE-50206 Logic Synthesis , Exercise 03
-- Project    : Generic adder (RTL description)
-------------------------------------------------------------------------------
-- File       : adder.vhd
-- Author     : Anh Huy Bui 293257 & Mohamed Ibrahim 292998
-- Company    : Tampere University
-- Created    : 2019-11-14
-- Last update: 2019-11-14
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: Adds different sizes of input operands
-------------------------------------------------------------------------------
-- Copyright (c) 2020 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2020-01-15  1.0      vbmoad  Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity  tb_audio_ctrl is
  -- Defining the generic operands width
  generic (ref_clk_freq_g : integer := 20000000;
		   sample_rate_g : integer := 48000;
		   data_width_g : integer := 16
		   ); 
end tb_audio_ctrl;


-------------------------------------------------------------------------------

architecture testbench of tb_audio_ctrl is
  CONSTANT clear_delay_c    : INTEGER := 20;
  CONSTANT clear_duration_c : INTEGER := 20;
  CONSTANT width_c : INTEGER := 16;
  CONSTANT step_left_c : INTEGER := 2;
  CONSTANT step_right_c : INTEGER := 10;  
  CONSTANT period_c         : TIME    := 50 NS;
  signal l_data_wg_actrl : std_logic_vector(data_width_g-1 downto 0);
  signal r_data_wg_actrl : std_logic_vector(data_width_g-1 downto 0);
  signal aud_bit_clk : std_logic;
  signal aud_lr_clk : std_logic;
  signal aud_data : std_logic;
  signal l_data_codec_tb : std_logic_vector(data_width_g-1 downto 0);
  signal r_data_codec_tb : std_logic_vector(data_width_g-1 downto 0);
  --------
  -- Signals for the DUV
  SIGNAL clk   : STD_LOGIC := '0';
  SIGNAL rst_n : STD_LOGIC := '0';
  SIGNAL sync_clear : STD_LOGIC;
  
  COMPONENT wave_gen
    GENERIC (
      width_g         :     INTEGER;
      step_g          :     INTEGER);
    PORT (
      rst_n           : IN  STD_LOGIC;
      clk             : IN  STD_LOGIC;
      sync_clear_n_in : IN  STD_LOGIC;
      value_out       : OUT STD_LOGIC_VECTOR(width_g-1 DOWNTO 0));
  END COMPONENT;
 
  component  audio_ctrl is
  -- Defining the generic operands width
    generic (ref_clk_freq_g : integer ;
	  	     sample_rate_g : integer ;
		     data_width_g : integer 
		     );

	port (
      left_data_in     : in  std_logic_vector(data_width_g -1 downto 0);
      right_data_in    : in  std_logic_vector(data_width_g -1 downto 0);
      clk     		 : in  std_logic;
      rst_n   		 : in  std_logic;
	  aud_bclk_out     : out std_logic;
	  aud_data_out     : out std_logic;
	  aud_lrclk_out    : out std_logic
	  );
  end component;
 
 component  audio_codec_model is
  -- Defining the generic operands width
  generic (data_width_g : integer
		   );
  port (
    aud_data_in     : in  std_logic;
    aud_bclk_in    : in  std_logic;
	aud_lrclk_in    : in  std_logic;
    clk     		 : in  std_logic;
    rst_n   		 : in  std_logic;
	value_left_out     : out std_logic_vector(data_width_g-1 downto 0);
	value_right_out     : out std_logic_vector(data_width_g-1 downto 0)
	);
end component;
 

  
begin  -- testbench

  clk   <= NOT clk AFTER period_c/2;
  rst_n <= '1'     AFTER period_c*4;
  
  -- Create synchronous clear signal
  sync_clear <= '1',
                '0' AFTER period_c*clear_delay_c,
                '1' AFTER period_c*(clear_delay_c+clear_duration_c);
	left_wave_gen : wave_gen
	  GENERIC MAP (
        width_g         => width_c,
        step_g          => step_left_c
        )
      PORT MAP (
        rst_n           => rst_n,
        clk             => clk,
        sync_clear_n_in => sync_clear,
        value_out       => l_data_wg_actrl
        );
		
	right_wave_gen : wave_gen
	  GENERIC MAP (
        width_g         => width_c,
        step_g          => step_right_c
        )
      PORT MAP (
        rst_n           => rst_n,
        clk             => clk,
        sync_clear_n_in => sync_clear,
        value_out       => r_data_wg_actrl
        );

	audio_controller : audio_ctrl
	  GENERIC MAP (
        ref_clk_freq_g         => ref_clk_freq_g,
        sample_rate_g          => sample_rate_g,
		data_width_g		   => data_width_g
        )
      port map (
		  left_data_in    =>  l_data_wg_actrl,
		  right_data_in   =>  r_data_wg_actrl,
		  clk     		=>  clk,
		  rst_n   		 => rst_n,
		  aud_bclk_out    =>  aud_bit_clk,
		  aud_data_out     => aud_data,
		  aud_lrclk_out    => aud_lr_clk
		  );
	  
	audio_codec : audio_codec_model
	  GENERIC MAP (
	    data_width_g		   => data_width_g
		)
	  port map (
		  aud_data_in    =>  aud_data,
		  aud_bclk_in   =>  aud_bit_clk,
		  aud_lrclk_in    =>  aud_lr_clk,
		  clk     		=>  clk,
		  rst_n   		 => rst_n,
		  value_left_out => l_data_codec_tb,
		  value_right_out => r_data_codec_tb
		  );
		  
end testbench;
