-------------------------------------------------------------------------------
-- Title      : TIE-50206 Logic Synthesis , Exercise 03
-- Project    : Generic adder (RTL description)
-------------------------------------------------------------------------------
-- File       : adder.vhd
-- Author     : Anh Huy Bui 293257 & Mohamed Ibrahim 292998
-- Company    : Tampere University
-- Created    : 2019-11-14
-- Last update: 2019-11-14
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: Adds different sizes of input operands
-------------------------------------------------------------------------------
-- Copyright (c) 2020 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2020-01-15  1.0      vbmoad  Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity  audio_ctrl is
  -- Defining the generic operands width
  generic (ref_clk_freq_g : integer := 12288000;
		   sample_rate_g : integer := 48000;
		   data_width_g : integer := 16
		   );
  
  -- 
  port (
    left_data_in     : in  std_logic_vector(data_width_g -1 downto 0);
    right_data_in    : in  std_logic_vector(data_width_g -1 downto 0);
    clk     		 : in  std_logic;
    rst_n   		 : in  std_logic;
	aud_bclk_out     : out std_logic;
	aud_data_out     : out std_logic;
	aud_lrclk_out    : out std_logic
	);
end audio_ctrl;


-------------------------------------------------------------------------------

architecture audio_ctrl_architecture of audio_ctrl is

  constant two_words : INTEGER  := integer(32);
  signal internal_output : std_logic;
  
  --------
  signal b_counter : integer;
  signal lr_counter: integer;
  signal word_frequency_divider: integer := ref_clk_freq_g / sample_rate_g;
  signal bit_frequency_divider : integer := ref_clk_freq_g / (sample_rate_g * two_words);
  signal data_snapshot_word_r: std_logic_vector(data_width_g -1 downto 0);
  signal data_snapshot_bit_r: std_logic_vector(data_width_g -1 downto 0);
  signal aud_bclk_out_r: std_logic;
  signal aud_lrclk_out_r: std_logic;
  
begin  -- rtl

  -- Clocked process for bclk
  bclk_process : process(rst_n, clk, aud_lrclk_out_r)
    begin
    -- Checking for reset signal
    if (rst_n = '0') then
      -- Resetting the internal signal and outputs
      --aud_bclk_out <= '0';
	  aud_data_out <= '0';
	  aud_bclk_out_r <= '0';
	  b_counter <= 0;
	  data_snapshot_bit_r <= (others => '0');
    elsif (clk'event and clk = '1') then 
		if b_counter = bit_frequency_divider-1 then
			b_counter <= 0;
			aud_bclk_out_r <= not aud_bclk_out_r;
			if aud_bclk_out_r = '0' then
				data_snapshot_bit_r(data_width_g-1 downto 1) <= data_snapshot_bit_r(data_width_g-2 downto 0);
				data_snapshot_bit_r(0) <= '0';	
			end if;
		else
		  b_counter <= b_counter + 1;
		end if;
	elsif aud_lrclk_out_r'event then
		data_snapshot_bit_r <= data_snapshot_word_r;			
    end if;
	aud_data_out <= data_snapshot_bit_r(data_width_g-1);

  end process bclk_process;
  
    wclk_process : process(rst_n, clk)
  begin
    -- Checking for reset signal
    if (rst_n = '0') then
      -- Resetting the internal signals
      --aud_lrclk_out <= '1';
	  aud_lrclk_out_r <= '1';
	  lr_counter <= 0;
	  data_snapshot_word_r <= (others => '0');
    elsif (clk'event and clk = '1') then 
		if lr_counter = word_frequency_divider-1 then
			lr_counter <= 0;
			aud_lrclk_out_r <= not aud_lrclk_out_r;
			if aud_lrclk_out_r = '0' then
				data_snapshot_word_r <= right_data_in;
			else
				data_snapshot_word_r <= left_data_in;
			end if;
		else
			lr_counter <= lr_counter + 1;
		end if;
    end if;

  end process wclk_process;
 	aud_bclk_out <= aud_bclk_out_r;
	aud_lrclk_out <= aud_lrclk_out_r; 
end audio_ctrl_architecture;
